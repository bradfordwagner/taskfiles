---
version: '3'

env:
  wd: '{{ .USER_WORKING_DIR }}'

vars:
  debug: '{{ default "false" .debug }}'
  test_file: '{{ default "test.yml" .test_file }}'
  build_cmds: |
    [[ "true" == "{{ .debug }}" ]] && ansible -m setup localhost || echo Skipping Host Debug
    [ -f meta/requirements.yml ] && ansible-galaxy install -r meta/requirements.yml || echo "Skipping Role Dependency Download: No requirements.yml Found"
    set -e
    ansible-playbook {{ .test_file }}

tasks:
  default:
    cmds:
      - |
        cd ${wd}
        {{ .build_cmds }}

  local_container:
    cmds:
      - |
        cd ${wd}

        # resolve upstream - if none provided then use the first from config.yaml
        build=$(echo '{{ .build }}')
        if [[ "" == "{{ .build }}" ]]; then
          build=$(yq -oj '.builds[0]' config.yaml | jq -rc '.')
        fi

        # config vars
        config=$(cat config.yaml | yq -oj  '.')
        repo=$(echo ${config} | jq -r '.upstream.repo')
        tag=$(echo ${config} | jq -r '.upstream.tag')

        # build vars
        os=$(echo ${build} | jq -r '.os')

        set -x
        img=${repo}:${tag}-${os}

        # create a temporary dockerfile
        # this is to avoid using -v and mounting the entire directory
        # which will allow lead to repo file modification
        tmp_dockerfile=$(mktemp /tmp/Dockerfile.XXXXX)
        cat <<EOF > ${tmp_dockerfile}
        FROM --platform=linux/amd64 ${img}
        WORKDIR /src
        COPY . .
        EOF
        intermediate_tag=ansible-role-$((RANDOM))
        docker build --platform=linux/amd64 -t ${intermediate_tag} -f ${tmp_dockerfile} .

        docker run -it --platform=linux/amd64 ${intermediate_tag} sh -c '
        {{ .build_cmds }}
        '
