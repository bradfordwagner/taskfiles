---
version: '3'

env:
  wd: '{{ .USER_WORKING_DIR }}'

vars:
  debug: '{{ default "false" .debug }}'
  test_file: '{{ default "test.yml" .test_file }}'
  build_cmds: |
    [[ "true" == "{{ .debug }}" ]] && ansible -m setup localhost || echo Skipping Host Debug
    [ -f meta/requirements.yml ] && ansible-galaxy install -r meta/requirements.yml || echo "Skipping Role Dependency Download: No meta/requirements.yml Found"
    [ -f requirements.yml ] && ansible-galaxy install -r requirements.yml || echo "Skipping Role Dependency Download: No requirements.yml Found"
    set -e
    [ -f {{ .test_file }} ] && ansible-playbook {{ .test_file }}
    [ -f playbook.yml ] && ansible-playbook playbook.yml
tasks:
  default:
    cmds:
      - |
        cd ${wd}
        {{ .build_cmds }}
  delete_role_from_galaxy:
    desc: |
      Deletes the role in galaxy
    vars:
      token: '{{ .token }}'
    cmds:
      - |
        cd ${wd}

        # parse user and repo from git remote
        get_url=$(git remote get-url origin)
        user=$(echo ${get_url} | sed -E 's|https://github.com/(.*)/.*$|\1|g')
        repo=$(echo ${get_url} | sed -E 's|https://github.com/.*/(.*).git$|\1|g')

        role=$(yq -r '.galaxy_info.role_name' ./meta/main.yml)

        # import the role into ansible galaxy
        ansible-galaxy role delete --token {{ .token }} ${user} ${repo}
  publish_role_to_galaxy:
    desc: |
      Publishes the role to galaxy
    vars:
      token: '{{ .token }}'
    silent: true
    cmds:
      - |
        cd ${wd}

        # parse user and repo from git remote
        get_url=$(git remote get-url origin)
        user=$(echo ${get_url} | sed -E 's|https://github.com/(.*)/.*$|\1|g')
        # https://serverfault.com/questions/417241/extract-repository-name-from-github-url-in-bash
        repo_suffix=$(basename ${get_url} )
        repo=${repo_suffix%.*}
        echo user=${user} repo=${repo}

        role=$(yq -r '.galaxy_info.role_name' ./meta/main.yml)

        # import the role into ansible galaxy
        ansible-galaxy role import --role-name ${role} --token "{{ .token }}" ${user} ${repo}
  local_container:
    vars:
      platform: '{{ default "linux/amd64" .platform }}'
    cmds:
      - |
        cd ${wd}

        # resolve upstream - if none provided then use the first from config.yaml
        build=$(echo '{{ .build }}')
        if [[ "" == "{{ .build }}" ]]; then
          build=$(yq -oj '.builds[0]' config.yaml | jq -rc '.')
        fi

        # config vars
        config=$(cat config.yaml | yq -oj  '.')
        repo=$(echo ${config} | jq -r '.upstream.repo')
        tag=$(echo ${config} | jq -r '.upstream.tag')

        # build vars
        os=$(echo ${build} | jq -r '.os')

        set -x
        img=${repo}:${tag}-${os}

        # create a temporary dockerfile
        # this is to avoid using -v and mounting the entire directory
        # which will allow lead to repo file modification
        tmp_dockerfile=$(mktemp /tmp/Dockerfile.XXXXX)
        cat <<EOF > ${tmp_dockerfile}
        FROM ${img}
        WORKDIR /src
        COPY . .
        EOF
        intermediate_tag=ansible-role-$((RANDOM))
        docker build --platform={{ .platform }} -t ${intermediate_tag} -f ${tmp_dockerfile} .

        docker run -it --platform={{ .platform }} ${intermediate_tag} sh -c '
        {{ .build_cmds }}
        '
