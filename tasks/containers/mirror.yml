---
version: '3'

description: |
  This is used to run docker builds on gh actions

vars:
  is_tag: false

tasks:
  init:
    desc: |
      This task is used to create the config.yaml file to initialize mirror builds
    cmds:
      - |
        cat <<EOF > {{ .USER_WORKING_DIR }}/config.yaml
        # created by init task for use with github actons
        target_repo: ghcr.io/bradfordwagner/template-mirror
        builds:
          - { repo: alpine    , tag: '3.19'   , platforms: [linux/amd64    , linux/arm64] }
          - { repo: alpine    , tag: '3.18'   , platforms: [linux/amd64    , linux/arm64] }
          - { repo: debian    , tag: bookworm , platforms: [linux/amd64    , linux/arm64] }
          - { repo: debian    , tag: bullseye , platforms: [linux/amd64    , linux/arm64] }
          - { repo: ubuntu    , tag: noble    , platforms: [linux/amd64    , linux/arm64] }
          - { repo: ubuntu    , tag: mantic   , platforms: [linux/amd64    , linux/arm64] }
          - { repo: archlinux , tag: latest   , platforms: [linux/amd64] }
        EOF
  build:
    desc: |
      This task is used to build the docker images
    vars:
      build: '{{ default "" .build }}'
      target_tag: '{{ default "latest" .target_tag }}'
    cmds:
      - |
        cd {{ .USER_WORKING_DIR }}

        # resolve upstream - if none provided then use the first from config.yaml
        build=$(echo '{{ .build }}')
        if [[ "" == "{{ .build }}" ]]; then
          build=$(yq -oj '.builds[0]' config.yaml | jq -rc '.')
        fi

        # resolve golang vars
        {{- $push_flag := eq "true" .is_tag | ternary "--push" " " }}

        # resolve bash vars
        repo=$(echo $build | jq -r '.repo')
        repo_tag=$(echo $build | jq -r '.tag')
        platforms=$(echo $build | jq -r '.platforms | join(",")')
        push_flag={{ $push_flag }}
        target_repo=$(yq -r '.target_repo' config.yaml)
        target_tag={{ .target_tag }}

        # resolve target_repo_name
        target_repo_name=${repo}
        repo_override=$(echo $build | jq -r '.repo_override')
        [ -n "${repo_override}" ] && target_repo_name=${repo_override}


        # debug
        echo -n build=
        jq '.' <<< $build
        echo repo=$repo
        echo repo_tag=$repo_tag
        echo platforms=$platforms
        echo push_flag=$push_flag
        echo target_repo=$target_repo
        echo target_tag=$target_tag

        set -x
        echo "
        FROM ${repo}:${repo_tag}
        " | docker buildx build --platform ${platforms} -t ${target_repo}:${target_tag}-${target_repo_name}_${repo_tag} ${push_flag} -
