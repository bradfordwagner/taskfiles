---
# todo: setup buildkit
# initially use mirror task
# - handle on tag:
# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-workflow-only-when-a-push-of-specific-tags-occurs

version: '3'

vars:
  task_version: 3.35.1
  buildx_version: v0.13.1
  jq_version: 1.7
  yq_version: v4.43.1
  on_tags: |
    on:
      push:
        tags:
          - '*'
  on_branches: |
    on:
      - push
      - workflow_dispatch
  default_steps: |
    - name: checkout=self
      uses: actions/checkout@v4
    - name: task={{ .task_version }}
      uses: pnorton5432/setup-task@v1
      with:
        task-version: {{ .task_version }}
    - name: checkout=taskfiles
      uses: actions/checkout@v4
      with:
        path: taskfiles
        repository: bradfordwagner/taskfiles
  docker_steps: |
    - name: qemu
      uses: docker/setup-qemu-action@v3
    - name: docker_buildx={{ .buildx_version }}
      uses: docker/setup-buildx-action@v3
      with:
        version: {{ .buildx_version }}
    - uses: docker/login-action@v3
      name: login=ghcr.io
      with:
        registry: ghcr.io
        username: {{ `\${{ github.actor }}` }}
        password: {{ `\${{ github.token }}` }}

  # job to load config yaml in a prestep
  config_yaml: |
    config-yaml:
      name: config.yaml
      runs-on: ubuntu-latest
      outputs:
        config: {{ `\${{ steps.config.outputs.config }}`}}
      steps:
        - uses: actions/checkout@v4
        # https://github.com/chrisdickinson/setup-yq/blob/latest/action.yml
        - uses: chrisdickinson/setup-yq@v1.0.1
          name: yq={{ .yq_version }}
          with:
            yq-version: {{ .yq_version }}
        - name: jq={{ .jq_version }}
          uses: dcarbone/install-jq-action@v2
          with:
            version: {{ .jq_version }}
        - name: export=config
          id: config
          run: echo "config=\$(yq -oj '.' config.yaml | jq -cr)" >> \$GITHUB_OUTPUT

tasks:
  mkdir:
    internal: true
    cmds:
      - mkdir -p {{ .USER_WORKING_DIR }}/.github/workflows
  ansible_role:
    cmds:
      - task: mkdir
        ignore_error: true
        # delete old configuraton for ansible role - remoe after rev'd in all repos
      - cmd: rm {{ .USER_WORKING_DIR }}/.github/workflows/ansible_role.yml
        ignore_error: true
      - for: [branches]
        cmd: |
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/ansible_role_{{ .ITEM }}.yml
          name: ansible_role
          on:
            - push
            - workflow_dispatch
          jobs:
            {{- .config_yaml | nindent 2 -}}
            ansible-role:
              name: {{ `\${{ matrix.build.os }}`}}
              needs: config-yaml
              runs-on: ubuntu-latest
              strategy:
                fail-fast: false
                matrix:
                  build: {{ `\${{ fromJSON(needs.config-yaml.outputs.config).builds }}` }}
              container:
                image: {{ printf "%s:%s-%s"
                  `\${{ fromJSON(needs.config-yaml.outputs.config).upstream.repo }}`
                  `\${{ fromJSON(needs.config-yaml.outputs.config).upstream.tag }}`
                  `\${{ matrix.build.os }}`
                  }}
              steps:
                {{- .default_steps | nindent 6 -}}
                - name: task=branches
                  run: task -t ./taskfiles/tasks/ansible_role.yml
          EOF
  yaml_lint:
    cmds:
      - task: mkdir
        ignore_error: true
      - |
        cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/yaml_lint.yml
        name: yaml_lint
        on: push
        jobs:
          yaml-lint:
            runs-on: ubuntu-latest
            steps:
              {{- .default_steps | nindent 6 -}}
              - name: install=yamllint
                run: pip install --user yamllint
              - name: task=yamllint
                run: task -t ./taskfiles/tasks/yaml_lint.yml
        EOF
  go_releaser:
    vars:
      go_version: 1.21
      goreleaser_version: 1.24.0
    cmds:
      - task: mkdir
        ignore_error: true
      - for: [tags, branches]
        cmd: |
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/go_releaser_{{ .ITEM }}.yml
          name: go_releaser_{{ .ITEM }}
          {{- if eq .ITEM "tags" }}
          {{ .on_tags -}}
          {{- else }}
          {{ .on_branches -}}
          {{- end -}}
          jobs:
            go-releaser-{{ .ITEM }}:
              runs-on: ubuntu-latest
              steps:
                {{- .default_steps | nindent 6 -}}
                - name: go={{ .go_version }}
                  uses: actions/setup-go@v5
                  with:
                    go-version: {{ .go_version }}
                - name: goreleaser={{ .goreleaser_version }}
                  uses: goreleaser/goreleaser-action@v5
                  with:
                    version: {{ .goreleaser_version }}
                    install-only: true
                - name: task={{ .ITEM }}
                  run: task -t ./taskfiles/tasks/go_releaser.yml is_tag={{ eq .ITEM "tags" }}
                  env:
                    GITHUB_TOKEN: {{ `\${{ github.token }} `}}
          EOF
  helm:
    vars:
      helm_version: v3.14.3
    cmds:
      - task: mkdir
        ignore_error: true
      - for: [branches]
        cmd: |
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/helm_{{ .ITEM }}.yml
          name: helm-{{ .ITEM }}
          {{ .on_branches -}}
          jobs:
            helm_{{ .ITEM }}:
              runs-on: ubuntu-latest
              steps:
                {{- .default_steps | nindent 6 -}}
                - name: helm={{ .helm_version }}
                  uses: azure/setup-helm@v4.1.0
                  with:
                     version: '{{ .helm_version }}'
                - name: task={{ .ITEM }}
                  run: task -t ./taskfiles/tasks/helm.yml
          EOF
  container_mirror:
    cmds:
      - task: mkdir
        ignore_error: true
      - for: [branches, tags]
        cmd: |
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/docker_mirror_{{ .ITEM }}.yml
          name: docker-mirror-{{ .ITEM }}
          {{- if eq .ITEM "tags" }}
          {{ .on_tags -}}
          {{- else }}
          {{ .on_branches -}}
          {{- end -}}
          jobs:
            {{- .config_yaml | nindent 2 -}}
            {{ .ITEM }}:
              runs-on: ubuntu-latest
              needs: config-yaml
              name: {{ `\${{ matrix.build.repo }}_\${{ matrix.build.tag }}`}}
              strategy:
                fail-fast: false
                matrix:
                  build: {{ `\${{ fromJSON(needs.config-yaml.outputs.config).builds }}` }}
              steps:
                {{- .default_steps | nindent 6 -}}
                {{- .docker_steps | nindent 6 -}}
                - name: task={{ .ITEM }}
                  run: |
                    {{- $ci_tag := `\${{ github.ref_name }}` }}
                    build={{ `\$(echo '\${{ toJson(matrix.build) }}'  | jq -rc '.')` }}
                    task -t ./taskfiles/tasks/containers/mirror.yml \\
                      build \\
                      build=\${build} \\
                      target_tag={{ eq .ITEM "tags" | ternary $ci_tag "latest" }} \\
                      is_tag={{ eq .ITEM "tags" }}
          EOF

  container_custom:
    vars:
      config:
        sh: cat {{ .USER_WORKING_DIR }}/config.yaml | yq
    cmds:
      - task: mkdir
        ignore_error: true
      - for: [branches, tags]
        cmd: |
          {{- $c := fromJson .config -}}
          {{- $root := . -}}
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/docker_custom_{{ .ITEM }}.yml
          name: docker-custom-{{ .ITEM }}
          {{- if eq .ITEM "tags" }}
          {{ .on_tags -}}
          {{- else }}
          {{ .on_branches -}}
          {{- end -}}
          jobs:
          {{- .config_yaml | nindent 2 -}}
            {{ .ITEM }}:
              name: {{ `\${{ matrix.build.os }}` }}
              runs-on: ubuntu-latest
              needs: config-yaml
              strategy:
                fail-fast: false
                matrix:
                  build: {{ `\${{ fromJSON(needs.config-yaml.outputs.config).builds }}` }}
              steps:
                {{- .default_steps | nindent 6 -}}
                {{- .docker_steps | nindent 6 -}}
                - name: task={{ .ITEM }}
                  run: |
                    {{ $ci_tag := `\${{ github.ref_name }}` }}
                    build={{ `\$(echo '\${{ toJson(matrix.build) }}'  | jq -rc '.')` }}
                    task -t ./taskfiles/tasks/containers/custom.yml \\
                      build \\
                      build=\${build} \\
                      target_tag={{ eq .ITEM "tags" | ternary $ci_tag "latest" }} \\
                      is_tag={{ eq .ITEM "tags" }}
          EOF
