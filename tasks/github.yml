#file: noinspection YAMLSchemaValidation
---
# todo: setup buildkit
# initially use mirror task
# - handle on tag:
# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-workflow-only-when-a-push-of-specific-tags-occurs

version: '3'

vars:
  # deprecated
  task_version: 3.35.1
  taskfiles_version: feature/arm
  # taskfiles_version: main
  buildx_version: v0.13.1
  jq_version: 1.7
  yq_version: v4.43.1
  terraform_version: 1.5.7
  vault_version: 1.16.1
  vault_addr: https://bradfordwagner.com:8200
  on_tags: |
    on:
      push:
        tags:
          - '*'
  on_branches: |
    on:
      - push
      - workflow_dispatch
  default_steps: |
    - name: checkout=self
      uses: actions/checkout@v4
    - name: task=latest
      run: |
        sh -c "\$(curl --location https://taskfile.dev/install.sh)" -- -d
        export PATH=\$(pwd)/bin:\$PATH
    - name: task=version
      run: ./bin/task --version
    - name: checkout=taskfiles@{{ .taskfiles_version }}
      uses: actions/checkout@v4
      with:
        path: taskfiles
        repository: bradfordwagner/taskfiles
        ref: {{ .taskfiles_version }}
  dagger_version: 0.11.8
  default_steps_v2: |
    - uses: actions/checkout@v4
    - name: dagger={{ .dagger_version }}
      run: |
        curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION={{ .dagger_version}} sh
  docker_steps: |
    - name: qemu
      uses: docker/setup-qemu-action@v3
    - name: docker_buildx={{ .buildx_version }}
      uses: docker/setup-buildx-action@v3
      with:
        version: {{ .buildx_version }}
  docker_login: |
    # work around other runner's logging out removing credentials
    # https://github.com/docker/login-action/issues/173#issuecomment-1079688020
    - name: Set DOCKER_CONFIG
      run: |
        id=docker_configs/\$(uuidgen)
        mkdir -p \$HOME/\${id}/.docker
        echo "DOCKER_CONFIG=\$HOME/\${id}/.docker" >> \$GITHUB_ENV
    - uses: docker/login-action@v3
      name: login=ghcr.io
      with:
        registry: ghcr.io
        username: {{ `\${{ github.actor }}` }}
        password: {{ `\${{ github.token }}` }}
        logout: false
  yq_steps: |
    # https://github.com/chrisdickinson/setup-yq/blob/latest/action.yml
    - uses: chrisdickinson/setup-yq@v1.0.1
      name: yq={{ .yq_version }}
      with:
        yq-version: {{ .yq_version }}
    - name: yq=version
      run: yq --version
  jq_steps: |
    - name: jq={{ .jq_version }}
      uses: dcarbone/install-jq-action@v2
      with:
        version: {{ .jq_version }}
  # job to load config yaml in a prestep
  config_yaml: |
    config-yaml:
      name: config.yaml
      runs-on: arm64
      outputs:
        config: {{ `\${{ steps.config.outputs.config }}`}}
      steps:
        - uses: actions/checkout@v4
        {{- .yq_steps | nindent 4 }}
        {{- .jq_steps | nindent 4 }}
        - name: export=config
          id: config
          run: echo "config=\$(yq -oj '.' config.yaml | jq -cr)" >> \$GITHUB_OUTPUT

tasks:
  mkdir:
    internal: true
    cmds:
      - mkdir -p {{ .USER_WORKING_DIR }}/.github/workflows
  ansible_role:
    vars:
      dagger_module: github.com/bradfordwagner/dagger-modules/ansible@feature/ansible
    cmds:
      - task: mkdir
        ignore_error: true
      - for: [branches, tags]
        cmd: |
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/ansible_role_{{ .ITEM }}.yml
          name: ansible_role_{{ .ITEM }}
          {{- if eq .ITEM "tags" }}
          {{ .on_tags -}}
          {{- else }}
          {{ .on_branches -}}
          {{- end -}}
          env:
            {{- $ci_tag := `\${{ github.ref_name }}` }}
            {{- $version := eq .ITEM "tags" | ternary $ci_tag "latest" }}
            version: {{ $version }}
          jobs:
            config-yaml:
              name: config.yaml
              runs-on: arm64
              outputs:
                product: {{ `\${{ steps.config.outputs.product }}`}}
              steps:
                {{- .default_steps_v2 | nindent 6 }}
                - name: dagger=product
                  id: config
                  run: |
                    echo product=\$(./bin/dagger -m {{ .dagger_module }} call product-json --src=. --version=\${version}) >> \$GITHUB_OUTPUT
            builds:
              runs-on: {{ `\${{ matrix.product.runner }}` }}
              permissions: write-all
              needs: config-yaml
              name: {{ `\${{ matrix.product.index }}:\${{ matrix.product.os }} (\${{ matrix.product.arch }})`}}
              strategy:
                fail-fast: false
                matrix:
                  product: {{ `\${{ fromJSON(needs.config-yaml.outputs.product) }}` }}
              steps:
                {{- .default_steps_v2 | nindent 6 -}}
                {{- .docker_login | nindent 6 -}}
                - name: dagger=build
                  run: |
                    ./bin/dagger -m {{ .dagger_module }} call build \\
                      --src=. \\
                      --index={{ `\${{ matrix.product.index }}` }} \\
                      --version=\${version} \\
                      --isDev=false \\
                      --flavor=role
          {{- if eq .ITEM "tags" }}
            ansible-role-{{ .ITEM }}-publish:
              name: publish
              needs: [config-yaml, builds]
              runs-on: ubuntu-latest
              steps:
                - name: checkout=self
                  uses: actions/checkout@v4
                - name: galaxy_publish
                  uses: robertdebock/galaxy-action@1.2.0
                  with:
                    galaxy_api_key: {{ `\${{ secrets.GALAXY_TOKEN }}`}}
                    git_branch: {{ `\${{ github.ref_name }}`}}
          {{- end }}
          EOF
  yaml_lint:
    cmds:
      - task: mkdir
        ignore_error: true
      - |
        cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/yaml_lint.yml
        name: yaml_lint
        on: push
        jobs:
          yaml-lint:
            runs-on: ubuntu-latest
            steps:
              {{- .default_steps | nindent 6 -}}
              - name: install=yamllint
                run: pip install --user yamllint
              - name: task=yamllint
                run: task -t ./taskfiles/tasks/yaml_lint.yml
        EOF
  go_releaser:
    vars:
      go_version: 1.21
      goreleaser_version: 1.24.0
    cmds:
      - task: mkdir
        ignore_error: true
      - for: [tags, branches]
        cmd: |
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/go_releaser_{{ .ITEM }}.yml
          name: go_releaser_{{ .ITEM }}
          {{- if eq .ITEM "tags" }}
          {{ .on_tags -}}
          {{- else }}
          {{ .on_branches -}}
          {{- end -}}
          jobs:
            go-releaser-{{ .ITEM }}:
              permissions: write-all
              runs-on: ubuntu-latest
              steps:
                {{- .default_steps | nindent 6 -}}
                - name: go={{ .go_version }}
                  uses: actions/setup-go@v5
                  with:
                    go-version: {{ .go_version }}
                - name: goreleaser={{ .goreleaser_version }}
                  uses: goreleaser/goreleaser-action@v5
                  with:
                    version: {{ .goreleaser_version }}
                    install-only: true
                - name: task={{ .ITEM }}
                  run: task -t ./taskfiles/tasks/go_releaser.yml is_tag={{ eq .ITEM "tags" }}
                  env:
                    GITHUB_TOKEN: {{ `\${{ github.token }} `}}
          EOF
  helm:
    vars:
      helm_version: v3.14.3
    cmds:
      - task: mkdir
        ignore_error: true
      - for: [branches]
        cmd: |
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/helm_{{ .ITEM }}.yml
          name: helm-{{ .ITEM }}
          {{ .on_branches -}}
          jobs:
            helm_{{ .ITEM }}:
              runs-on: ubuntu-latest
              steps:
                {{- .default_steps | nindent 6 -}}
                - name: helm={{ .helm_version }}
                  uses: azure/setup-helm@v4.1.0
                  with:
                     version: '{{ .helm_version }}'
                - name: task={{ .ITEM }}
                  run: task -t ./taskfiles/tasks/helm.yml
          EOF
  container_mirror:
    vars:
      dagger_module: github.com/bradfordwagner/dagger-modules/container_mirror@v0.1.0
    cmds:
      - task: mkdir
        ignore_error: true
      - for: [branches, tags]
        cmd: |
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/docker_mirror_{{ .ITEM }}.yml
          name: docker-mirror-{{ .ITEM }}
          {{- if eq .ITEM "tags" }}
          {{ .on_tags -}}
          {{- else }}
          {{ .on_branches -}}
          {{- end -}}
          env:
            {{- $ci_tag := `\${{ github.ref_name }}` }}
            {{- $version := eq .ITEM "tags" | ternary $ci_tag "latest" }}
            version: {{ $version }}
          jobs:
            config-yaml:
              name: config.yaml
              runs-on: arm64
              outputs:
                product: {{ `\${{ steps.config.outputs.product }}`}}
              steps:
                {{- .default_steps_v2 | nindent 6 }}
                - name: dagger=product
                  id: config
                  run: |
                    echo product=\$(./bin/dagger -m {{ .dagger_module }} call product-json --src=.) >> \$GITHUB_OUTPUT
            builds:
              runs-on: {{ `\${{ matrix.product.runner }}` }}
              permissions: write-all
              needs: config-yaml
              name: {{ `\${{ matrix.product.index }}:\${{ matrix.product.repo }}-\${{ matrix.product.tag }} (\${{ matrix.product.arch }})`}}
              strategy:
                fail-fast: false
                matrix:
                  product: {{ `\${{ fromJSON(needs.config-yaml.outputs.product) }}` }}
              steps:
                {{- .default_steps_v2 | nindent 6 -}}
                {{- .docker_login | nindent 6 -}}
                - name: dagger=build
                  id: config
                  run: |
                    ./bin/dagger -m {{ .dagger_module }} call build \\
                      --src=. \\
                      --index={{ `\${{ matrix.product.index }}` }} \\
                      --version=\${version} \\
                      --isDev=false
            manifest:
              runs-on: arm64
              permissions: write-all
              needs: builds
              name: manifest-tool
              env:
                actor: {{ `\${{ github.actor }}` }}
                token: {{ `\${{ github.token }}` }}
              steps:
                {{- .default_steps_v2 | nindent 6 -}}
                {{- .docker_login | nindent 6 -}}
                - name: dagger=manifest
                  id: config
                  run: |
                    ./bin/dagger -m {{ .dagger_module }} call manifest \\
                      --src=. \\
                      --version=\${version} \\
                      --actor=env:actor \\
                      --token=env:token
          EOF

  container_custom:
    vars:
      dagger_module: github.com/bradfordwagner/dagger-modules/container_custom@v0.1.0
    cmds:
      - task: mkdir
        ignore_error: true
      - for: [branches, tags]
        cmd: |
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/docker_custom_{{ .ITEM }}.yml
          name: docker-custom-{{ .ITEM }}
          {{- if eq .ITEM "tags" }}
          {{ .on_tags -}}
          {{- else }}
          {{ .on_branches -}}
          {{- end -}}
          env:
            {{- $ci_tag := `\${{ github.ref_name }}` }}
            {{- $version := eq .ITEM "tags" | ternary $ci_tag "latest" }}
            version: {{ $version }}
          jobs:
            config-yaml:
              name: config.yaml
              runs-on: arm64
              outputs:
                product: {{ `\${{ steps.config.outputs.product }}`}}
              steps:
                {{- .default_steps_v2 | nindent 6 }}
                - name: dagger=product
                  id: config
                  run: |
                    echo product=\$(./bin/dagger -m {{ .dagger_module }} call product-json --src=. --version=\${version}) >> \$GITHUB_OUTPUT
            builds:
              runs-on: {{ `\${{ matrix.product.runner }}` }}
              permissions: write-all
              needs: config-yaml
              name: {{ `\${{ matrix.product.index }}:\${{ matrix.product.os }} (\${{ matrix.product.arch }})`}}
              strategy:
                fail-fast: false
                matrix:
                  product: {{ `\${{ fromJSON(needs.config-yaml.outputs.product) }}` }}
              steps:
                {{- .default_steps_v2 | nindent 6 -}}
                {{- .docker_login | nindent 6 -}}
                - name: dagger=build
                  run: |
                    ./bin/dagger -m {{ .dagger_module }} call build \\
                      --src=. \\
                      --index={{ `\${{ matrix.product.index }}` }} \\
                      --version=\${version} \\
                      --isDev=false
            manifest:
              runs-on: arm64
              permissions: write-all
              needs: builds
              name: manifest-tool
              env:
                actor: {{ `\${{ github.actor }}` }}
                token: {{ `\${{ github.token }}` }}
              steps:
                {{- .default_steps_v2 | nindent 6 -}}
                {{- .docker_login | nindent 6 -}}
                - name: dagger=manifest
                  id: config
                  run: |
                    ./bin/dagger -m {{ .dagger_module }} call manifest \\
                      --src=. \\
                      --version=\${version} \\
                      --actor=env:actor \\
                      --token=env:token
          EOF

  container_ansible_playbook:
    vars:
      config:
        sh: cat {{ .USER_WORKING_DIR }}/config.yaml | yq -o json
    cmds:
      - task: mkdir
        ignore_error: true
      - for: [branches, tags]
        cmd: |
          {{- $c := fromJson .config -}}
          {{- $root := . -}}
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/ansible_playbook_{{ .ITEM }}.yml
          name: ansible-playbook-{{ .ITEM }}
          {{- if eq .ITEM "tags" }}
          {{ .on_tags -}}
          {{- else }}
          {{ .on_branches -}}
          {{- end -}}
          jobs:
            {{- .config_yaml | nindent 2 }}
            matrix-builds:
              name: {{ `\${{ matrix.build.os }}` }}-{{ `\${{ matrix.build.arch }}` }}
              permissions: write-all
              runs-on: {{ `\${{ matrix.build.runs_on }}` }}
              needs: config-yaml
              strategy:
                fail-fast: false
                matrix:
                  build: {{ `\${{ fromJSON(needs.config-yaml.outputs.config).builds }}` }}
              steps:
                {{- .default_steps | nindent 6 -}}
                {{- .yq_steps | nindent 6 -}}
                {{- .jq_steps | nindent 6 -}}
                {{- .docker_login | nindent 6 -}}
                {{- $ci_tag := `\${{ github.ref_name }}` }}
                {{- $resolved_tag := eq .ITEM "tags" | ternary $ci_tag "latest" -}}
                - name: task={{ .ITEM }}
                  run: |
                    build={{ `\$(echo '\${{ toJson(matrix.build) }}'  | jq -rc '.')` }}
                    ./bin/task -t ./taskfiles/tasks/containers/ansible.yml \\
                      build \\
                      build=\${build} \\
                      target_tag={{ $resolved_tag }} \\
                      is_tag={{ eq .ITEM "tags" }}
                {{ if eq .ITEM "tags" }}
                - name: manifest_tool
                  continue-on-error: true
                  uses: pixelfederation/gh-action-manifest-tool@v0.1.7
                  with:
                    username: {{ `\${{ github.actor }}` }}
                    password: {{ `\${{ github.token }}` }}
                    platforms: linux/amd64,linux/arm64
                    template: {{ `\${{ fromJSON(needs.config-yaml.outputs.config).target_repo }}` }}:{{ $resolved_tag }}-{{ `\${{ matrix.build.os }}`}}-OS_ARCH
                    target: {{ `\${{ fromJSON(needs.config-yaml.outputs.config).target_repo }}` }}:{{ $resolved_tag }}-{{ `\${{ matrix.build.os }}`}}
                {{- end }}
          EOF

  terraform_workspaces:
    vars:
      config:
        sh: cat {{ .USER_WORKING_DIR }}/config.yaml | yq
    cmds:
      - task: mkdir
        ignore_error: true
      - for: [branches, tags]
        cmd: |
          {{- $c := fromJson .config -}}
          {{- $root := . -}}
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/terraform_workspaces_{{ .ITEM }}.yml
          name: terraform-workspaces-{{ .ITEM }}
          {{- if eq .ITEM "tags" }}
          {{ .on_tags -}}
          {{- else }}
          {{ .on_branches -}}
          {{- end -}}
          jobs:
          {{- .config_yaml | nindent 2 -}}
            {{ .ITEM }}:
              permissions: write-all
              name: {{ `\${{ matrix.workspace.name }}` }}
              runs-on: ubuntu-latest
              needs: config-yaml
              strategy:
                fail-fast: false
                matrix:
                  workspace: {{ `\${{ fromJSON(needs.config-yaml.outputs.config).workspaces }}` }}
              steps:
                {{- .default_steps | nindent 6 -}}
                - name: vault={{ .vault_version }}
                  uses: cpanato/vault-installer@main
                  with:
                    vault-release: {{ .vault_version }}
                - name: vault=login@{{ .vault_addr }}
                  id: import-secrets
                  uses: hashicorp/vault-action@v3
                  with:
                    url: {{ .vault_addr }}
                    method: approle
                    roleId: {{ `\${{ secrets.ROLE_ID }}` }}
                    secretId: {{ `\${{ secrets.SECRET_ID }}` }}
                    exportToken: true
                - uses: hashicorp/setup-terraform@v3
                  name: terraform={{ .terraform_version }}
                  with:
                    terraform_version: {{ .terraform_version }}
                - name: task={{ .ITEM }}
                  run: |
                    {{- $ci_tag := `\${{ github.ref_name }}` }}
                    workspace={{ `\$(echo '\${{ toJson(matrix.workspace) }}'  | jq -rc '.')` }}
                    task -t ./taskfiles/tasks/terraform.yml \\
                      workspaces \\
                      workspace=\${workspace} \\
                      target_tag={{ eq .ITEM "tags" | ternary $ci_tag "latest" }} \\
                      tf_action={{ eq .ITEM "tags" | ternary "apply" "plan" }}
          EOF

  github_runners:
    vars:
      config:
        sh: cat {{ .USER_WORKING_DIR }}/config.yaml | yq
    cmds:
      - task: mkdir
        ignore_error: true
      - for: [branches]
        cmd: |
          {{- $c := fromJson .config -}}
          {{- $root := . -}}
          cat <<EOF > {{ .USER_WORKING_DIR }}/.github/workflows/github_runners_{{ .ITEM }}.yml
          name: github-runners-{{ .ITEM }}
          {{- if eq .ITEM "tags" }}
          {{ .on_tags -}}
          {{- else }}
          {{ .on_branches -}}
          {{- end -}}
          jobs:
          {{- .config_yaml | nindent 2 -}}
            {{ .ITEM }}:
              name: {{ `\${{ matrix.vms.name }}` }}
              permissions: write-all
              runs-on: {{ `\${{ matrix.vms.name }}` }}
              needs: config-yaml
              strategy:
                fail-fast: false
                matrix:
                  vms: {{ `\${{ fromJSON(needs.config-yaml.outputs.config).vms }}` }}
              steps:
                - name: checkout=self
                  uses: actions/checkout@v4
                - run: |
                    . /ansible_env/bin/activate
                    set -x
                    ansible-galaxy install -f -r requirements.yml
                    ansible-playbook pb-vms.yml -e runners_token={{ `\${{ secrets.TOKEN }}` }}
          EOF
